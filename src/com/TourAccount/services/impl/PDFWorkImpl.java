package com.TourAccount.services.impl;

import android.content.Context;
import android.util.Log;
import com.TourAccount.model.*;
import com.TourAccount.services.PDFWork;
import com.TourAccount.services.ParseCollectToString;
import com.TourAccount.sqlite.DatabaseHandler;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;

/**
 * User: User
 * Date: 23.02.15
 * Time: 16:59
 */
public class PDFWorkImpl implements PDFWork {

    CalculateImpl calculate;
    private String fontPATH;
    private DatabaseHandler db;
    private Context applContext;
    private ParseCollectToString parseCollectToString;

    private static final String LOG = "PDFWorkImpl";
    SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");


    @Override
    public void setApplContext(Context applContext) {
        this.applContext = applContext;
    }

    @Override
    public DatabaseHandler getDb() {
        return db;
    }

    @Override
    public void setDb(DatabaseHandler db) {
        this.db = db;
    }

    @Override
    public void setFontPATH(String fontPATH) {
        this.fontPATH = fontPATH;
    }

    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);


    private Font winFont;

    public void setWinFont() throws IOException, DocumentException {
        BaseFont winBaseFont = BaseFont.createFont(fontPATH, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
        winFont = new Font(winBaseFont, 12);
    }


    // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    public void addMetaData(Document document) {
        document.addTitle("Отчет по турам");
        document.addSubject("Отчет по турам");
        document.addKeywords("Туры, Отчеты");
        document.addAuthor("Хозяин");
        document.addCreator("Хозяин");
    }

    public void addTitlePage(Document document)
            throws DocumentException, IOException {
        BaseFont bfComic = BaseFont.createFont(fontPATH, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
        Font font1 = new Font(bfComic, 12);
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Заголовок документа", font1));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph("Отчет создан: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                font1));
        addEmptyLine(preface, 3);
        //preface.add(new Paragraph("This document describes something which is very important ",
        //        smallBold));

        addEmptyLine(preface, 8);

        preface.add(new Paragraph("Содержимое документа",
                redFont));

        document.add(preface);
        // Start a new page
        document.newPage();
    }


    public void addContent(Document document) throws DocumentException {
        Anchor anchor = new Anchor("First Chapter", catFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph("Subcategory 1", subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("PRIVETIK"));

        subPara = new Paragraph("Subcategory 2", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("PARAGRAF 1"));
        subCatPart.add(new Paragraph("Параграф 2"));
        subCatPart.add(new Paragraph("Параграф 3"));

        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);

        // add a table
        //createTable(subCatPart);

        // now add all this to the document
        document.add(catPart);

        // Next section
        anchor = new Anchor("Second Chapter", catFont);
        anchor.setName("Second Chapter");

        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Subcategory", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("This is a very important message"));

        // now add all this to the document
        document.add(catPart);

    }

    public void addContent(Document document, ArrayList<Tour> tourList) throws DocumentException, IOException {

        BaseFont winBaseFont = BaseFont.createFont(fontPATH, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
        Font winFont = new Font(winBaseFont, 12);

        Anchor anchor = new Anchor("First Chapter", winFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);


        for (Tour tour : tourList) {
            Paragraph subPara = new Paragraph(tour.getName(), winFont);
            Section subCatPart = catPart.addSection(subPara);
            subCatPart.add(new Paragraph(tour.toString()));


            subCatPart.add(new Paragraph(dateFormat.format(tour.getDate_begin())));
            subCatPart.add(new Paragraph(dateFormat.format(tour.getDate_end())));
            subCatPart.add(new Paragraph(tour.getMain_cur()));

        }
        // now add all this to the document
        document.add(catPart);

    }

    @Override
    public void addContent(Document document, ArrayList<TourItem> tourItems, Tour tour, ArrayList<Currency> tourCourrencies,
                           ArrayList<Tourist> tourists) throws DocumentException, IOException {


        Anchor anchor = new Anchor("First Chapter", winFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph(tour.getName(), winFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Данные по туру", winFont));

        createTourHeader(subCatPart, tour);
        createTourTable(subCatPart, tourItems, tour, tourCourrencies, tourists);


        Currency currency = null;
        for (Currency currencyIn : tourCourrencies)
            currency = currencyIn;

        try {
            createTourFooter(subCatPart, tour, currency.getId());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        // now add all this to the document
        document.add(catPart);

    }

    //перед таблицей выводить итого по туру
    public void createTourHeader(Section subCatPart, Tour tour) {
        Paragraph paragraph = null;

        calculate = new CalculateImpl();
        calculate.DataBaseHandler(applContext);

        paragraph = new Paragraph("Тур: " + tour.getName() + "\nДата начала: " + tour.getDate_begin() + "\n Кол-во участников: " + tour.getTourist_cnt(),
                winFont);

        subCatPart.add(paragraph);

        Map<Integer, Float> sumMap = db.getTourAllSum(tour.getId(), TourEnum.TourItemType.OUTGOING.value);
        String sum = "";
        Float outgoing = 0F, incoming = 0F;

        sum += "\n";
        sum += "Итого расходов: \n" + calculate.makeResSum(calculate.GetSum(sumMap, tour.getId()));
        Log.e(LOG, "\nприходы\n");
        sumMap = db.getTourAllSum(tour.getId(), TourEnum.TourItemType.INCOMING.value);

        sum += "\n";
        sum += "Итого приход: " + calculate.makeResSum(calculate.GetSum(sumMap, tour.getId()));

        Log.e(LOG, "\nобщий итог\n");
        sumMap = db.getTourAllSum(tour.getId(), TourEnum.TourItemType.ALL.value);

        sum += "\n";
        sum += "Итого: " + calculate.makeResSum(calculate.GetSum(sumMap, tour.getId()));

        paragraph = new Paragraph(sum,
                winFont);

        subCatPart.add(paragraph);


    }

    //после таблицы выводить кто кому что должен, если было несколкьо плательщиков
    // и средний расход на человека по туру
    public void createTourFooter(Section subCatPart, Tour tour, int curr_id) {

        Paragraph paragraph = null;
        Log.d(LOG, "createTourFooter " + tour.toString());
        Log.d(LOG, "createTourFooter curr_id = " + curr_id);

        ArrayList<DebtorPair> debtorPairArrayList = //(ArrayList) calculate.makePair(tour, curr_id);
                (ArrayList<DebtorPair>) calculate.makeResultPairs(tour.getId());
        for (DebtorPair debtorPair : debtorPairArrayList) {
            Tourist touristDebtor = db.getTourist(debtorPair.debtorId);
            Tourist touristAntiDebtor = db.getTourist(debtorPair.antiDebtorId);

            paragraph = new Paragraph(
                    "Этот " + touristDebtor.getTourist_name() + " \t должен этому " + touristAntiDebtor.getTourist_name() +
                            "\t вот столько " + debtorPair.sum
                    ,
                    winFont);

            subCatPart.add(paragraph);
        }
    }

    public void createTourTable(Section subCatPart, ArrayList<TourItem> tourItems, Tour tour, ArrayList<Currency> tourCourrencies,
                                ArrayList<Tourist> tourists)
            throws BadElementException {
        PdfPTable table = new PdfPTable(7);

        table.setSpacingBefore(2);
        table.setSpacingAfter(2);
        //названия столбцов

        PdfPCell c1 = new PdfPCell(new Phrase("Номер записи", winFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);


        c1 = new PdfPCell(new Phrase("Расход", winFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Сумма", winFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        c1 = new PdfPCell(new Phrase("Валюта", winFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        c1 = new PdfPCell(new Phrase("Участник", winFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);


        c1 = new PdfPCell(new Phrase("Дата", winFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        //добавляем еще список кто-кому должен
        c1 = new PdfPCell(new Phrase("Кто-кому-чего", winFont));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        int i = 1;
        for (TourItem tourItem : tourItems) {

            c1 = new PdfPCell(new Phrase(String.valueOf(i), winFont));
            c1.setBackgroundColor(tourItem.getItem_type() > 0 ? BaseColor.LIGHT_GRAY : null);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase(tourItem.getTour_descr(), winFont));
            c1.setBackgroundColor(tourItem.getItem_type() > 0 ? BaseColor.LIGHT_GRAY : null);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase(String.valueOf(tourItem.getCurr_amount()), winFont));
            c1.setBackgroundColor(tourItem.getItem_type() > 0 ? BaseColor.LIGHT_GRAY : null);
            table.addCell(c1);

            Currency currency = Currency.search(tourCourrencies, tourItem.getCurr_id());
            if (currency != null)
                c1 = new PdfPCell(new Phrase(currency.getName(), winFont));
            else
                c1 = new PdfPCell(new Phrase("", winFont));
            c1.setBackgroundColor(tourItem.getItem_type() > 0 ? BaseColor.LIGHT_GRAY : null);
            table.addCell(c1);

            Tourist tourist = Tourist.search(tourists, tourItem.getTourist_id());
            if (tourist != null)
                c1 = new PdfPCell(new Phrase(tourist.getTourist_name(), winFont));
            else
                c1 = new PdfPCell(new Phrase("", winFont));
            c1.setBackgroundColor(tourItem.getItem_type() > 0 ? BaseColor.LIGHT_GRAY : null);
            table.addCell(c1);

            c1 = new PdfPCell(new Phrase(tourItem.getTour_date(), winFont));
            c1.setBackgroundColor(tourItem.getItem_type() > 0 ? BaseColor.LIGHT_GRAY : null);
            table.addCell(c1);

            //добавляем еще список кто-кому должен
            java.util.List<DebtorPair> debtorPairs = calculate.makePairsOneItem(tourItem.getId());
            parseCollectToString = new ParseCollectToStringImpl(db);
            c1 = new PdfPCell(new Phrase(parseCollectToString.parseDebtorPairsToString(debtorPairs), winFont));
            c1.setBackgroundColor(tourItem.getItem_type() > 0 ? BaseColor.LIGHT_GRAY : null);
            table.addCell(c1);

            i++;
        }

        subCatPart.add(Chunk.NEWLINE);
        subCatPart.add(table);

    }

    public void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    public void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
